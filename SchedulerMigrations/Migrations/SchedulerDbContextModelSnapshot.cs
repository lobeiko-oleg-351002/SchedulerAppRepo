// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchedulerMigrations.Data;

namespace SchedulerMigrations.Migrations
{
    [DbContext(typeof(SchedulerDbContext))]
    partial class SchedulerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChiefStudent", b =>
                {
                    b.Property<Guid>("ChiefsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChiefsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ChiefStudent");
                });

            modelBuilder.Entity("DayOfWeekWeeklyEventTime", b =>
                {
                    b.Property<Guid>("DaysOfWeekId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WeeklyEventTimesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DaysOfWeekId", "WeeklyEventTimesId");

                    b.HasIndex("WeeklyEventTimesId");

                    b.ToTable("DayOfWeekWeeklyEventTime");
                });

            modelBuilder.Entity("SchedulerModels.DayOfWeek", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DayOfWeek");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec51a38b-6e66-495e-8d06-521968615219"),
                            Name = "Monday"
                        },
                        new
                        {
                            Id = new Guid("8d658792-fd18-43ae-83dc-cc590deafe6e"),
                            Name = "Tuesday"
                        },
                        new
                        {
                            Id = new Guid("316a7b38-b201-43ad-bcda-97e471afd7b9"),
                            Name = "Wednesday"
                        },
                        new
                        {
                            Id = new Guid("6e024dd4-3bb2-4950-aa86-89a690e1f6ae"),
                            Name = "Thursday"
                        },
                        new
                        {
                            Id = new Guid("2d452b7c-1fc7-4177-95db-54ea33a48551"),
                            Name = "Friday"
                        },
                        new
                        {
                            Id = new Guid("9560f26d-e357-49b2-9bb8-d015cfac0a99"),
                            Name = "Saturday"
                        },
                        new
                        {
                            Id = new Guid("d876720f-172c-4197-a8b3-80ab4b73e278"),
                            Name = "Sunday"
                        });
                });

            modelBuilder.Entity("SchedulerModels.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChiefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EventTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChiefId");

                    b.HasIndex("EventTemplateId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("SchedulerModels.EventTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChiefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChiefId");

                    b.ToTable("EventTemplate");
                });

            modelBuilder.Entity("SchedulerModels.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d0c63ea-1c81-4918-aa9e-4ae46d145263"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("5c83a1ff-21e9-4153-bf52-94d68a375bd6"),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("SchedulerModels.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Student");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd7a8d3f-b18f-4107-8cd7-b02b61c8a452"),
                            Email = "normandy@gmail.com",
                            Name = "John",
                            Password = "shepard2072"
                        },
                        new
                        {
                            Id = new Guid("091ac8de-5614-423c-aac5-36fced77cd94"),
                            Email = "eugene@gmail.com",
                            Name = "Raynor",
                            Password = "raiders44"
                        });
                });

            modelBuilder.Entity("SchedulerModels.Subscriber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("StudentId");

                    b.ToTable("Subscriber");
                });

            modelBuilder.Entity("SchedulerModels.WeeklyEventTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("WeeklyEventId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WeeklyEventId");

                    b.ToTable("WeeklyEventTime");
                });

            modelBuilder.Entity("SchedulerModels.SingleEvent", b =>
                {
                    b.HasBaseType("SchedulerModels.Event");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.ToTable("SingleEvent");
                });

            modelBuilder.Entity("SchedulerModels.WeeklyEvent", b =>
                {
                    b.HasBaseType("SchedulerModels.Event");

                    b.ToTable("WeeklyEvent");
                });

            modelBuilder.Entity("SchedulerModels.Chief", b =>
                {
                    b.HasBaseType("SchedulerModels.Student");

                    b.Property<string>("Profile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Chief");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80688d76-3197-407d-bc61-69f6aedce3cb"),
                            Email = "totalit280@gmail.com",
                            Name = "Totalit",
                            Password = "vitebsk2021",
                            Profile = "Discussion Club"
                        },
                        new
                        {
                            Id = new Guid("dbf823ae-0aef-4307-b215-c18892309f01"),
                            Email = "mlarsm@gmail.com",
                            Name = "Lars Ulrich",
                            Password = "drumdrum",
                            Profile = "Drum Club"
                        });
                });

            modelBuilder.Entity("ChiefStudent", b =>
                {
                    b.HasOne("SchedulerModels.Chief", null)
                        .WithMany()
                        .HasForeignKey("ChiefsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulerModels.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DayOfWeekWeeklyEventTime", b =>
                {
                    b.HasOne("SchedulerModels.DayOfWeek", null)
                        .WithMany()
                        .HasForeignKey("DaysOfWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulerModels.WeeklyEventTime", null)
                        .WithMany()
                        .HasForeignKey("WeeklyEventTimesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchedulerModels.Event", b =>
                {
                    b.HasOne("SchedulerModels.Chief", "Chief")
                        .WithMany("Events")
                        .HasForeignKey("ChiefId");

                    b.HasOne("SchedulerModels.EventTemplate", "EventTemplate")
                        .WithMany()
                        .HasForeignKey("EventTemplateId");

                    b.Navigation("Chief");

                    b.Navigation("EventTemplate");
                });

            modelBuilder.Entity("SchedulerModels.EventTemplate", b =>
                {
                    b.HasOne("SchedulerModels.Chief", null)
                        .WithMany("EventTemplates")
                        .HasForeignKey("ChiefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchedulerModels.Student", b =>
                {
                    b.HasOne("SchedulerModels.Role", "Role")
                        .WithMany("Students")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SchedulerModels.Subscriber", b =>
                {
                    b.HasOne("SchedulerModels.Event", "Event")
                        .WithMany("Subscribers")
                        .HasForeignKey("EventId");

                    b.HasOne("SchedulerModels.Student", "Student")
                        .WithMany("Subscribers")
                        .HasForeignKey("StudentId");

                    b.Navigation("Event");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchedulerModels.WeeklyEventTime", b =>
                {
                    b.HasOne("SchedulerModels.WeeklyEvent", null)
                        .WithMany("DateAndTime")
                        .HasForeignKey("WeeklyEventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchedulerModels.SingleEvent", b =>
                {
                    b.HasOne("SchedulerModels.Event", null)
                        .WithOne()
                        .HasForeignKey("SchedulerModels.SingleEvent", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchedulerModels.WeeklyEvent", b =>
                {
                    b.HasOne("SchedulerModels.Event", null)
                        .WithOne()
                        .HasForeignKey("SchedulerModels.WeeklyEvent", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchedulerModels.Chief", b =>
                {
                    b.HasOne("SchedulerModels.Student", null)
                        .WithOne()
                        .HasForeignKey("SchedulerModels.Chief", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchedulerModels.Event", b =>
                {
                    b.Navigation("Subscribers");
                });

            modelBuilder.Entity("SchedulerModels.Role", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchedulerModels.Student", b =>
                {
                    b.Navigation("Subscribers");
                });

            modelBuilder.Entity("SchedulerModels.WeeklyEvent", b =>
                {
                    b.Navigation("DateAndTime");
                });

            modelBuilder.Entity("SchedulerModels.Chief", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("EventTemplates");
                });
#pragma warning restore 612, 618
        }
    }
}
