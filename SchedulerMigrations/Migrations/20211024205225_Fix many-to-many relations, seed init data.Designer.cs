// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchedulerMigrations.Data;

namespace SchedulerMigrations.Migrations
{
    [DbContext(typeof(SchedulerDbContext))]
    [Migration("20211024205225_Fix many-to-many relations, seed init data")]
    partial class Fixmanytomanyrelationsseedinitdata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DayOfWeekWeeklyEventTime", b =>
                {
                    b.Property<int>("DaysOfWeekId")
                        .HasColumnType("int");

                    b.Property<int>("WeeklyEventTimesId")
                        .HasColumnType("int");

                    b.HasKey("DaysOfWeekId", "WeeklyEventTimesId");

                    b.HasIndex("WeeklyEventTimesId");

                    b.ToTable("DayOfWeekWeeklyEventTime");
                });

            modelBuilder.Entity("SchedulerModels.DayOfWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DayOfWeek");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Monday"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tuesday"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Wednesday"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Thursday"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Friday"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Saturday"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Sunday"
                        });
                });

            modelBuilder.Entity("SchedulerModels.EventTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChiefId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChiefId");

                    b.ToTable("EventTemplate");
                });

            modelBuilder.Entity("SchedulerModels.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChiefId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChiefId");

                    b.ToTable("Student");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Email = "normandy@gmail.com",
                            Name = "John",
                            Password = "shepard2072"
                        },
                        new
                        {
                            Id = 4,
                            Email = "eugene@gmail.com",
                            Name = "Raynor",
                            Password = "raiders44"
                        });
                });

            modelBuilder.Entity("SchedulerModels.WeeklyEventTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WeeklyEventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeeklyEventId");

                    b.ToTable("WeeklyEventTime");
                });

            modelBuilder.Entity("SchedulerModels.Event", b =>
                {
                    b.HasBaseType("SchedulerModels.EventTemplate");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("SchedulerModels.Chief", b =>
                {
                    b.HasBaseType("SchedulerModels.Student");

                    b.Property<string>("Profile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Chief");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "totalit280@gmail.com",
                            Name = "Totalit",
                            Password = "vitebsk2021",
                            Profile = "Discussion Club"
                        },
                        new
                        {
                            Id = 2,
                            Email = "mlarsm@gmail.com",
                            Name = "Lars Ulrich",
                            Password = "drumdrum",
                            Profile = "Drum Club"
                        });
                });

            modelBuilder.Entity("SchedulerModels.Subscriber", b =>
                {
                    b.HasBaseType("SchedulerModels.Student");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.HasIndex("EventId");

                    b.ToTable("Subscriber");
                });

            modelBuilder.Entity("SchedulerModels.SingleEvent", b =>
                {
                    b.HasBaseType("SchedulerModels.Event");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.ToTable("SingleEvent");
                });

            modelBuilder.Entity("SchedulerModels.WeeklyEvent", b =>
                {
                    b.HasBaseType("SchedulerModels.Event");

                    b.ToTable("WeeklyEvent");
                });

            modelBuilder.Entity("DayOfWeekWeeklyEventTime", b =>
                {
                    b.HasOne("SchedulerModels.DayOfWeek", null)
                        .WithMany()
                        .HasForeignKey("DaysOfWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulerModels.WeeklyEventTime", null)
                        .WithMany()
                        .HasForeignKey("WeeklyEventTimesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchedulerModels.EventTemplate", b =>
                {
                    b.HasOne("SchedulerModels.Chief", null)
                        .WithMany("EventTemplates")
                        .HasForeignKey("ChiefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchedulerModels.Student", b =>
                {
                    b.HasOne("SchedulerModels.Chief", null)
                        .WithMany("Students")
                        .HasForeignKey("ChiefId");
                });

            modelBuilder.Entity("SchedulerModels.WeeklyEventTime", b =>
                {
                    b.HasOne("SchedulerModels.WeeklyEvent", null)
                        .WithMany("DateAndTime")
                        .HasForeignKey("WeeklyEventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchedulerModels.Event", b =>
                {
                    b.HasOne("SchedulerModels.EventTemplate", null)
                        .WithOne()
                        .HasForeignKey("SchedulerModels.Event", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchedulerModels.Chief", b =>
                {
                    b.HasOne("SchedulerModels.Student", null)
                        .WithOne()
                        .HasForeignKey("SchedulerModels.Chief", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchedulerModels.Subscriber", b =>
                {
                    b.HasOne("SchedulerModels.Event", null)
                        .WithMany("Subscribers")
                        .HasForeignKey("EventId");

                    b.HasOne("SchedulerModels.Student", null)
                        .WithOne()
                        .HasForeignKey("SchedulerModels.Subscriber", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchedulerModels.SingleEvent", b =>
                {
                    b.HasOne("SchedulerModels.Event", null)
                        .WithOne()
                        .HasForeignKey("SchedulerModels.SingleEvent", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchedulerModels.WeeklyEvent", b =>
                {
                    b.HasOne("SchedulerModels.Event", null)
                        .WithOne()
                        .HasForeignKey("SchedulerModels.WeeklyEvent", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchedulerModels.Event", b =>
                {
                    b.Navigation("Subscribers");
                });

            modelBuilder.Entity("SchedulerModels.Chief", b =>
                {
                    b.Navigation("EventTemplates");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchedulerModels.WeeklyEvent", b =>
                {
                    b.Navigation("DateAndTime");
                });
#pragma warning restore 612, 618
        }
    }
}
