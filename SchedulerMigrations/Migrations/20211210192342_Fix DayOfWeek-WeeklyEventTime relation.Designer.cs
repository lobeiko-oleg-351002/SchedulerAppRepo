// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchedulerMigrations.Data;

namespace SchedulerMigrations.Migrations
{
    [DbContext(typeof(SchedulerDbContext))]
    [Migration("20211210192342_Fix DayOfWeek-WeeklyEventTime relation")]
    partial class FixDayOfWeekWeeklyEventTimerelation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChiefStudent", b =>
                {
                    b.Property<Guid>("ChiefsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChiefsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ChiefStudent");
                });

            modelBuilder.Entity("DayOfWeekWeeklyEventTime", b =>
                {
                    b.Property<Guid>("DaysOfWeekId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WeeklyEventTimesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DaysOfWeekId", "WeeklyEventTimesId");

                    b.HasIndex("WeeklyEventTimesId");

                    b.ToTable("DayOfWeekWeeklyEventTime");
                });

            modelBuilder.Entity("SchedulerModels.DayOfWeek", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DayOfWeek");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb8ce05d-8a5b-400a-b754-56496c92b15e"),
                            Name = "Monday"
                        },
                        new
                        {
                            Id = new Guid("37e8c867-4ef6-4d69-97c8-2be9d5b69c93"),
                            Name = "Tuesday"
                        },
                        new
                        {
                            Id = new Guid("4b5d3c0a-7251-4cc2-9fa2-bb43da928cd4"),
                            Name = "Wednesday"
                        },
                        new
                        {
                            Id = new Guid("a3479e32-5aa9-445d-b5b2-b1cf369a54f2"),
                            Name = "Thursday"
                        },
                        new
                        {
                            Id = new Guid("df1e09c7-1a9b-4843-932e-3b7664d74c9e"),
                            Name = "Friday"
                        },
                        new
                        {
                            Id = new Guid("88ad5949-a890-4453-9e43-4d33e5656987"),
                            Name = "Saturday"
                        },
                        new
                        {
                            Id = new Guid("af87da64-783f-4a13-9179-9d2fe9633266"),
                            Name = "Sunday"
                        });
                });

            modelBuilder.Entity("SchedulerModels.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChiefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EventTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChiefId");

                    b.HasIndex("EventTemplateId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("SchedulerModels.EventTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChiefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChiefId");

                    b.ToTable("EventTemplate");
                });

            modelBuilder.Entity("SchedulerModels.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fded74fc-50c8-4883-ae14-8dbef739154d"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("f714a582-6a06-4ef6-87cb-673fda67d0df"),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("SchedulerModels.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Student");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69c82f23-a853-4f29-a020-8525c22a217b"),
                            Email = "normandy@gmail.com",
                            Name = "John",
                            Password = "shepard2072"
                        },
                        new
                        {
                            Id = new Guid("707102c1-04dd-4771-a726-6bacaf5be318"),
                            Email = "eugene@gmail.com",
                            Name = "Raynor",
                            Password = "raiders44"
                        });
                });

            modelBuilder.Entity("SchedulerModels.Subscriber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("StudentId");

                    b.ToTable("Subscriber");
                });

            modelBuilder.Entity("SchedulerModels.WeeklyEventTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("WeeklyEventId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WeeklyEventId");

                    b.ToTable("WeeklyEventTime");
                });

            modelBuilder.Entity("SchedulerModels.SingleEvent", b =>
                {
                    b.HasBaseType("SchedulerModels.Event");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.ToTable("SingleEvent");
                });

            modelBuilder.Entity("SchedulerModels.WeeklyEvent", b =>
                {
                    b.HasBaseType("SchedulerModels.Event");

                    b.ToTable("WeeklyEvent");
                });

            modelBuilder.Entity("SchedulerModels.Chief", b =>
                {
                    b.HasBaseType("SchedulerModels.Student");

                    b.Property<string>("Profile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Chief");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4261beb-aa68-46f4-8401-65f7c7d3adb9"),
                            Email = "totalit280@gmail.com",
                            Name = "Totalit",
                            Password = "vitebsk2021",
                            Profile = "Discussion Club"
                        },
                        new
                        {
                            Id = new Guid("6e8ffaa7-a339-4630-a980-ad6bc9fc353b"),
                            Email = "mlarsm@gmail.com",
                            Name = "Lars Ulrich",
                            Password = "drumdrum",
                            Profile = "Drum Club"
                        });
                });

            modelBuilder.Entity("ChiefStudent", b =>
                {
                    b.HasOne("SchedulerModels.Chief", null)
                        .WithMany()
                        .HasForeignKey("ChiefsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulerModels.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DayOfWeekWeeklyEventTime", b =>
                {
                    b.HasOne("SchedulerModels.DayOfWeek", null)
                        .WithMany()
                        .HasForeignKey("DaysOfWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulerModels.WeeklyEventTime", null)
                        .WithMany()
                        .HasForeignKey("WeeklyEventTimesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchedulerModels.Event", b =>
                {
                    b.HasOne("SchedulerModels.Chief", "Chief")
                        .WithMany("Events")
                        .HasForeignKey("ChiefId");

                    b.HasOne("SchedulerModels.EventTemplate", "EventTemplate")
                        .WithMany()
                        .HasForeignKey("EventTemplateId");

                    b.Navigation("Chief");

                    b.Navigation("EventTemplate");
                });

            modelBuilder.Entity("SchedulerModels.EventTemplate", b =>
                {
                    b.HasOne("SchedulerModels.Chief", null)
                        .WithMany("EventTemplates")
                        .HasForeignKey("ChiefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchedulerModels.Student", b =>
                {
                    b.HasOne("SchedulerModels.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SchedulerModels.Subscriber", b =>
                {
                    b.HasOne("SchedulerModels.Event", "Event")
                        .WithMany("Subscribers")
                        .HasForeignKey("EventId");

                    b.HasOne("SchedulerModels.Student", "Student")
                        .WithMany("Subscribers")
                        .HasForeignKey("StudentId");

                    b.Navigation("Event");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchedulerModels.WeeklyEventTime", b =>
                {
                    b.HasOne("SchedulerModels.WeeklyEvent", null)
                        .WithMany("DateAndTime")
                        .HasForeignKey("WeeklyEventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchedulerModels.SingleEvent", b =>
                {
                    b.HasOne("SchedulerModels.Event", null)
                        .WithOne()
                        .HasForeignKey("SchedulerModels.SingleEvent", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchedulerModels.WeeklyEvent", b =>
                {
                    b.HasOne("SchedulerModels.Event", null)
                        .WithOne()
                        .HasForeignKey("SchedulerModels.WeeklyEvent", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchedulerModels.Chief", b =>
                {
                    b.HasOne("SchedulerModels.Student", null)
                        .WithOne()
                        .HasForeignKey("SchedulerModels.Chief", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchedulerModels.Event", b =>
                {
                    b.Navigation("Subscribers");
                });

            modelBuilder.Entity("SchedulerModels.Student", b =>
                {
                    b.Navigation("Subscribers");
                });

            modelBuilder.Entity("SchedulerModels.WeeklyEvent", b =>
                {
                    b.Navigation("DateAndTime");
                });

            modelBuilder.Entity("SchedulerModels.Chief", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("EventTemplates");
                });
#pragma warning restore 612, 618
        }
    }
}
